--@name Luna Mainframe | Bootstrapper
--@author The17thDoctor
--@class none

--@includedir luna/libraries

--@includedir luna/modules
--@includedir luna/modules/base

--[[
	The bootstrapper is responsible for loading libraries and modules.
	The essentials library should be loaded first, environment last.
]]--

luna = {}

local function checkType(value, typeToCheck, argumentName, level)
	level = level or 0
	if typeToCheck == "Entity" then
		for i = 1, #entityMetatableList do
			if type(value) == entityMetatableList[i] then
				return
			end
		end

		error("Invalid type for argument "..argumentName..", expected "..typeToCheck.." got "..type(value), 2 + level)
	elseif typeToCheck == "Color" then
		if getmetatable(value) ~= "Color" then
			error("Invalid type for argument "..argumentName..", expected "..typeToCheck.." got "..type(value), 2 + level)
		end
	elseif type(value) ~= typeToCheck then
		error("Invalid type for argument "..argumentName..", expected "..typeToCheck.." got "..type(value), 2 + level)
	end
end

local function bootSay(...)
	printColor(Color(150, 150, 255), "[Bootstrapper] >> ", Color(225, 225, 225), ...)
end

--All loaded libraries, essentials should be loaded first, environment last.
bootstrapper = {}

local libraries = {}
local loadingOrder = {}

--Adds a library into the loading sequence
function bootstrapper.addLibrary(libraryName)
	checkType(libraryName, "string", "libraryName")
	libraries[#libraries+1] = libraryName
end

--Loads all libraries
function bootstrapper.loadAllLibraries()
	for i = 1, #libraries do
		require("luna/libraries/"..libraries[i])
	end
end

--Loads all modules while making sure to respect the loading order.
function bootstrapper.loadAllModules()
	local scripts = starfall.getScripts()
	table.sort(loadingOrder, function(a, b)
		return a[2] > b[2]
	end)

	local loaded = {}

	for i = 1, #loadingOrder do
		local scriptPath = "luna/modules/"..loadingOrder[i][1]..".txt"
		if scripts[scriptPath] ~= nil and not loaded[scriptPath] then
			local moduleEnvironment = getModuleEnvironment(scriptPath)
			setfenv(scripts[scriptPath], moduleEnvironment)
			loaded[scriptPath] = true
			xpcall(scripts[scriptPath], errorHandler)
		end
	end

	for path, func in pairs(scripts) do
		local explPath = path:explode("/")
		if explPath[1] == "luna" and explPath[2] == "modules" then
			if not loaded[path] then
				local moduleEnvironment = getModuleEnvironment(path)
				setfenv(func, moduleEnvironment)
				xpcall(func, errorHandler)
			end
		end
	end
end

--Tells the bootstrapper to load a module before others.
function bootstrapper.setPriority(moduleName, priority)
	checkType(moduleName, "string", "moduleName")
	checkType(priority, "number", "priority")

	if SERVER then
		for i = 1, #loadingOrder do
			if loadingOrder[i][1] == moduleName then
				table.remove(loadingOrder, i)
			end

			if loadingOrder[i][2] == priority then
				bootSay("Warning, overlapping priorities between '"..moduleName.."' and '"..loadingOrder[i][1].."'.")
			end
		end
	end

	loadingOrder[#loadingOrder+1] = {moduleName, priority}
end