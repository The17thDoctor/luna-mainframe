--@name Luna Mainframe | Essentials
--@author The17thDoctor
--@class none

--[[
	The mainframe's functions and systems other libraries and modules might use.
	Also implements standard versions of core systems like whitelist or settings control.

	All core systems can be overwritten if the end user is feeling like it without
	having to touch this library.

	It is recommend to keep those libraries getting loaded from shared in order to get updates.
]]--

--This is the global mainframe library
mainframe = {}

--This is the global library-wide library, implementing functions for libraries only to use.
libraries = {
	environment = {},
	environmentBlacklist = {}
}

local entityMetatableList = {
	"Entity",
	"ShipCore",
	"Shield",
	"Shuttle",
	"Player"
}

--Throws an error if the type of the given variable doesnt match the type to check.
function libraries.checkType(value, typeToCheck, argumentName, level)
	level = level or 0

	argumentName = argumentName or ""

	if typeToCheck == "Entity" then
		local isEnt = false
		for i = 1, #entityMetatableList do
			if type(value) == entityMetatableList[i] and IsValid(value) then
				isEnt = true
				return
			end
		end

		if isEnt and not IsValid(value) then
			error("Invalid entity", 3 + level)
		else
			error("Invalid type for argument "..argumentName..", expected "..typeToCheck.." got "..type(value), 3 + level)
		end
	elseif typeToCheck == "Color" then
		if getmetatable(value) ~= "Color" then
			error("Invalid type for argument "..argumentName..", expected "..typeToCheck.." got "..type(value), 3 + level)
		end
	elseif type(value) ~= typeToCheck then
		error("Invalid type for argument "..argumentName..", expected "..typeToCheck.." got "..type(value), 3 + level)
	end
end

local checkType = libraries.checkType

--Adds a new library to the module environment.
function libraries.addToEnvironment(libraryName, libraryTable)
	checkType(libraryName, "string", "libraryName")
	checkType(libraryTable, "table", "libraryTable")
	libraries.environment[libraryName] = libraryTable
end

--Removes a default starfall library from the list of libraries to add by default.
--Useful if you want to replace it with your own version.
function libraries.removeFromEnvironment(libraryName)
	libraries.environmentBlacklist[libraryName] = true
end

if SERVER then
	mainframe.filedata = {}

	---SAVE FILE

	local filename = "luna_savefile.txt"

	--Saves all settings, whitelists and additional datas.
	local function createFile()
		local file = io.open(filename, "w")
		if file ~= nil then
			file:close()
			return true
		end

		return false
	end

	local function checkForFile()
		if not files.exists(filename) then
			if not createFile() then
				return false
			end
		end

		return true
	end

	function mainframe.saveFile()
		if not checkForFile() then
			return false, "unable to create a save file"
		end

		local file, reason = io.open(filename, "w")

		if file ~= nil then
			local data = {}
			data.blacklist = mainframe.blacklist
			data.permalist = mainframe.permalist
			data.settings  = mainframe.settings
			data.filedata  = mainframe.filedata

			local jsonData = json.serialize(data, true)
			file:write(jsonData)
			file:close()
			return true
		else
			return false, reason
		end
	end

	function mainframe.loadFile()
		if not checkForFile() then
			return false, "unable to create a save file"
		end

		local file, reason = io.open(filename, "r")

		if file ~= nil then
			local jsonData = file:read("*a")
			file:close()

			local success, data = pcall(json.deserialize, jsonData)

			data = data or {}

			if success then
				mainframe.blacklist = data.blacklist or mainframe.blacklist
				mainframe.permalist = data.permalist or mainframe.permalist
				mainframe.settings	= data.settings  or mainframe.settings
				mainframe.filedata  = data.filedata  or mainframe.filedata
				return true
			else
				if mainframe.saveFile() then
					return false, "json data malformed, data overwritten"
				else
					return false, "json data malformed, unable to overwrite data"
				end
			end
		else
			return false, reason
		end
	end

	function mainframe.clearFile()
		mainframe.blacklist = {}
		mainframe.permalist = {}
		return mainframe.clearAllSettings()
	end

	---SETTINGS

	mainframe.settings 	= {}

	mainframe.SETTING_TYPE_WORD = "WORD"
	mainframe.SETTING_TYPE_NUMBER = "NUMBER"
	mainframe.SETTING_TYPE_STRING = "STRING"
	mainframe.SETTING_TYPE_BOOLEAN = "BOOLEAN"

	local WORD = mainframe.SETTING_TYPE_WORD
	local NUMBER = mainframe.SETTING_TYPE_NUMBER
	local STRING = mainframe.SETTING_TYPE_STRING
	local BOOLEAN = mainframe.SETTING_TYPE_BOOLEAN

	local allowedSettingTypes = {
		[mainframe.SETTING_TYPE_WORD]		= true,
		[mainframe.SETTING_TYPE_NUMBER]		= true,
		[mainframe.SETTING_TYPE_STRING]		= true,
		[mainframe.SETTING_TYPE_BOOLEAN]	= true,
	}


	--Adds a mainframe setting, this setting will be automatically saved to luna's save file
	function mainframe.addSetting(name, sType, default, extras)
		checkType(name, "string", "name")
		sType = sType:upper()
		extras = extras or {}
		if allowedSettingTypes[sType] == nil then error("Unknown setting type", 2) end
		if sType == "NUMBER" and type(default) ~= "number" then
			error("Invalid default value (expected number, got "..type(default)..")", 2)
		elseif (sType == "WORD" or sType == "STRING") and type(default) ~= "string" then
			error("Invalid default value (expected string, got "..type(default)..")", 2)
		elseif sType == "BOOLEAN" and type(default) ~= "boolean" then
			error("Invalid default value (expected boolean, got "..type(default)..")", 2)
		end

		if sType == "NUMBER" then
			if extras.min ~= nil then
				checkType(extras.min, "number", "extras.min")
			end

			if extras.max ~= nil then
				checkType(extras.max, "number", "extras.max")
			end

			if extras.choices ~= nil then
				if extras.min ~= nil or extras.max ~= nil then
					error("Cannot have a choice and a range", 2)
				elseif not extras.choices[default] then
					error("Default value not part of the choices", 2)
				end
			elseif extras.min ~= nil and default < extras.min then
				error("Default value under the minimum set value", 2)
			elseif extras.max ~= nil and default > extras.max then
				error("Default value over the maximum set value", 2)
			end
		elseif sType == "WORD" then
			if extras.length ~= nil then
				checkType(extras.length, "number", "extras.length")
			end

			if extras.choices ~= nil then
				if extras.length ~= nil then
					error("Cannot have a length limit and a choice", 2)
				elseif not extras.choices[default] then
					error("Default value not part of the choices", 2)
				end
			elseif extras.length ~= nil and utf8.len(default) > extras.length then
				error("Default value over the maximum length", 2)
			elseif #default:explode("%s", true) > 1 then
				error("Default value contains multiple words (change the setting type to STRING ?)", 2)
			end
		elseif sType == "STRING" then
			if extras.length ~= nil then
				checkType(extras.length, "number", "extras.length")
			end

			if extras.choices ~= nil then
				if extras.length ~= nil then
					error("Cannot have a length limit and a choice", 2)
				elseif not extras.choices[default] then
					error("Default value not part of the choices", 2)
				end
			elseif extras.length ~= nil and utf8.len(default) > extras.length then
				error("Default value over the maximum length", 2)
			end
		end

		mainframe.settings[name] = {
			name = name,
			type = sType,
			default = default,
			extras = extras,
			value = default
		}
	end

	--Returns a setting given its identifier
	function mainframe.getSetting(name, field)
		if field ~= nil then
			if mainframe.settings[name] ~= nil and mainframe.settings[name][field] ~= nil then
				return mainframe.settings[name][field]
			else
				return nil
			end
		else
			return mainframe.settings[name]
		end
	end

	--Sets a setting to the given value, it will check for the validity of the value
	function mainframe.setSetting(name, value)
		if mainframe.settings[name] == nil then error("Unknown setting name '"..name.."'", 1) end

		local setting = mainframe.settings[name]
		local sType, extras = setting.type, setting.extras

		checkType(value, type(setting.default), "value")

		if sType == mainframe.SETTING_TYPE_NUMBER then
			local min, max = extras.min or -math.huge, extras.max or math.huge
			if extras.choices ~= nil then
				if not extras.choices[value] then
					return false, "value not within choices"
				end
			elseif value < min or value > max then
				return false, "value out of bounds"
			end
		elseif sType == mainframe.SETTING_TYPE_STRING then
			local length = extras.length or math.huge
			if utf8.len(value) > length then
				return false, "string too long"
			elseif extras.choices ~= nil then
				if not extras.choices[value] then
					return false, "value not within choices"
				end
			end
		elseif sType == mainframe.SETTING_TYPE_WORD then
			local length = extras.length or math.huge
			if utf8.len(value) > length then
				return false, "word too long"
			elseif extras.choices ~= nil then
				if not extras.choices[value] then
					return false, "value not within choices"
				end
			end
		end

		mainframe.settings[name].value = value
		return true
	end

	--Sets all settings back to their default values
	function mainframe.clearAllSettings()
		for k, v in pairs(mainframe.settings) do
			v.value = v.default
		end

		return mainframe.saveFile()
	end

	--Sets a setting back to its default value given its name
	function mainframe.clearSetting(name)
		if mainframe.settings[name] == nil then error("Unknown setting", 2) end
		mainframe.settings[name].value = mainframe.settings[name].default
		return mainframe.saveFile()
	end

	---SHIP-WIDE PERSISTENT MEMORY
	--[[
		Allows the developper to store data on parts of the ship which lasts between restarts and dupes.
		Since data are stored on entities, it only lasts as long as the entity itself.
	]]--

	local EntityMeta = starfall.getTypeDef("Entity")

	--Gets the registered data on some entity.
	function mainframe.getEntityData(entity)
		checkType(entity, "Entity", "entity")

		local data = entity:getWireName()
		if data ~= "" then
			return json.deserialize(data)
		else
			return nil
		end
	end

	--Registers data onto an entity.
	function mainframe.setEntityData(entity, table)
		checkType(entity, "Entity", "entity")
		checkType(table, "table", "table")

		local dataString = json.serialize(table)
		if string.len(dataString) > 400 then
			return false, "too much data"
		else
			return true
		end
	end

	function EntityMeta:getData()
		checkType(self, "Entity", "entity")
		return mainframe.getEntityData(self)
	end

	function EntityMeta:setData(table)
		checkType(self, "Entity", "entity")
		checkType(table, "table", "table")
		return mainframe.setEntityData(self, table)
	end
end

---MODULE NET

function mainframe.sendModuleNet(channel, ...)
	libraries.checkType(channel, "string", "channel")
	if channel == "" then error("Channel string must contain characters", 2) end
	hook.run("modulenet_"..channel, ...)
end

--Lastly we're adding all written functions into the environment.
libraries.addToEnvironment("mainframe", mainframe)