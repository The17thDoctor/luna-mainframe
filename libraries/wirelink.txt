--@name Luna Mainframe | Wirelink
--@author The17thDoctor
--@class none

--[[
	Implements systems to simplify access to the ship's systems as well as
	wirelinks to entities.

	It is recommend to keep those libraries getting loaded from shared in order to get updates.
]]--

if CLIENT then return end
local checkType = libraries.checkType

local mfwire = {}
local libMeta = {}
local moduleMeta = {}
local modules = {}
libMeta.__index = libMeta

function libMeta.__call(_, mClass, names, unique, toggleable, togglerFunc, extraData)
	checkType(mClass, "string", "class")
	checkType(names, "table", "names")
	checkType(unique, "boolean", "unique")
	checkType(toggleable, "boolean", "toggleable")

	if toggleable then
		checkType(togglerFunc, "function", "togglerFunc")
	else
		togglerFunc = nil
	end

	if extraData ~= nil then
		checkType(extraData, "table", "extraData")
	else
		extraData = {}
	end

	if names.system == nil then error("Missing module system name", 1)
	elseif names.entity == nil then error("Missing module entity name", 1) end

	local moduleTable = {
		moduleClass = mClass,
		moduleNames = names,
		moduleUnique = unique,
		moduleToggleable = toggleable,
		moduleTogglerFunc = togglerFunc,
		moduleExtraData = extraData,
	}

	local module = setmetatable(moduleTable, moduleMeta)
	modules[mClass] = module
	return module
end


--Keeps people from just indexing values they should probably not
function moduleMeta.__index(self, key)
	if type(moduleMeta[key]) == "function" then
		return moduleMeta[key]
	else
		return nil
	end
end

--Locks the table
--function moduleMeta.__newindex() end

--Returns the module's class
function moduleMeta:class()
	return self.moduleClass
end

--Returns whether the module is unique aboard a ship
function moduleMeta:isUnique()
	return self.moduleUnique
end

--Returns the module's entity name
function moduleMeta:entityName()
	return self.moduleNames.entity
end

--Returns the module's system name
function moduleMeta:systemName()
	return self.moduleNames.system
end

--Returns whether the module can be turned on/off
function moduleMeta:toggleable()
	return self.moduleToggleable
end

function moduleMeta:extraData()
	return self.moduleExtraData
end

--Enables all entities found under the module's class
function moduleMeta:enableModule(...)
	if not self:toggleable() then return false, "can't be enabled" end
	return self.moduleTogglerFunc(self, true, ...)
end

--Disables all entities found under the module's class
function moduleMeta:disableModule(...)
	if not self:toggleable() then return false, "can't be disabled" end
	return self.moduleTogglerFunc(self, false, ...)
end

local function findFilter(entity)
	if entity:class() == "ship_core" then
		return ents.self():getCore() == entity
	else
		return ents.self():getCore() == entity:getCore()
	end
end

--Gets the entity(ies) for the specified module's class
function moduleMeta:getEntity()
	if self:isUnique() then
		if IsValid(self.entity) and findFilter(self.entity) then
			return self.entity
		else
			self.entity = nil
			local result = find.byClass(self:class(), findFilter)

			if IsValid(result[1]) then
				self.entity = result[1]
				return self.entity
			else
				return nil
			end
		end
	else
		return find.byClass(self:class(), findFilter)
	end
end

--Gets the wirelink(s) for the specified module's class
function moduleMeta:getWirelink()
	local entities = self:getEntity()

	if self:isUnique() and IsValid(entities) then
		return entities:getWirelink()
	elseif #entities > 0 then
		local wirelinks = {}
		for i = 1, #entities do
			wirelinks[#wirelinks+1] = entities[i]:getWirelink()
		end

		return wirelinks
	end
end

--Checks if the module has any valid entity on the ship.
function moduleMeta:isValid()
	local entities = self:getEntity()

	if self:isUnique() then
		return IsValid(entities) and findFilter(entities)
	else
		return #entities > 0
	end
end

function moduleMeta:__tostring()
	return "Module ["..self.moduleClass.."]"
end

function moduleMeta:__concat()
	return tostring(self)
end

function mfwire.getModuleByClass(moduleClass)
	checkType(moduleClass, "string", "class")
	return modules[moduleClass] or nil
end

function mfwire.getModuleByName(name, func)
	checkType(name, "string", "name")

	local t = {}
	if func ~= nil then
		checkType(func, "function", "func")
		for _, module in pairs(modules) do
			local match1 = string.find(module:systemName():lower(), name:lower())
			local match2 = string.find(module:entityName():lower(), name:lower())
			if (match1 ~= nil or match2 ~= nil) and func(module) then
				t[#t+1] = module
			end
		end
	else
		for _, module in pairs(modules) do
			local match1 = string.find(module:systemName():lower(), name:lower())
			local match2 = string.find(module:entityName():lower(), name:lower())
			if match1 ~= nil or match2 ~= nil then
				t[#t+1] = module
			end
		end
	end

	return t
end

function mfwire.getAllModules(func)
	local t = {}
	if func ~= nil then
		checkType(func, "function", "func")
		for k, v in pairs(modules) do
			if func(v) then
				t[#t+1] = v
			end
		end
	else
		for k, v in pairs(modules) do
			t[#t+1] = v
		end
	end

	return t
end

libraries.addToEnvironment("Module", setmetatable({}, libMeta))
libraries.addToEnvironment("mfwire", mfwire)