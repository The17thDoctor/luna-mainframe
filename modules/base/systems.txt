--@name Luna Mainframe | Module | Ship Systems Control
--@author The17thDoctor

if CLIENT then return end

mainframe.registerPermission("module", true)
mainframe.registerPermission("module.toggle", true)
mainframe.registerPermission("selfdestruct", false)
mainframe.registerPermission("selfdestruct.engage", false)
mainframe.registerPermission("selfDestruct.abort", false)

---Module Toggling

--The standard module toggler, adapts to most TSCM entities that can be turned on/off
local function standardToggler(module, enable, player)
	if not IsValid(module) then
		mfchat.error(player, "{s blue} not found.", module:entityName())
		return
	elseif not IsValid(mfwire.getModuleByClass("ship_core")) then
		mfchat.error(player, "{s blue} not found.", mfwire.getModuleByClass("ship_core"):entityName())
		return
	elseif not IsValid(mfwire.getModuleByClass("stargazer_node")) then
		mfchat.error(player, "{s blue} not found.", mfwire.getModuleByClass("stargazer_node"):entityName())
		return
	end

	local extraData = module:extraData()
	local activator = extraData.activator or "Activate"
	local active = extraData.active or "Active"

	if module:isUnique() then
		local wirelink = module:getWirelink()

		if enable then
			if wirelink[active] == 1 then
				mfchat.error(player, "The {s blue} is already active.", module:systemName())
				return
			elseif wirelink["State"] == "Awaiting Activation" then
				mfchat.error(player, "The {s blue} is awaiting activation.", module:systemName())
				return
			end

			wirelink[activator] = 1
			mfchat.say(player, "Enabling the {s blue}.", module:systemName())

			if wirelink["Subsystem Health"] < 25 then
				mfchat.error(player, "Subsystem health below 25%, the {s blue} won't engage!", module:systemName())
			end
			return
		else
			if wirelink[active] == 0 and wirelink["State"] ~= "Awaiting Activation" then
				mfchat.error(player, "The {s blue} is already inactive.", module:systemName())
				return
			end

			wirelink[activator] = 0
			mfchat.say(player, "Disabling the {s blue}.", module:systemName())
			return
		end
	else
		local wirelinks = module:getWirelink()

		if enable then
			local successful = 0
			for i = 1, #wirelinks do
				local wirelink = wirelinks[i]
				if wirelink[active] ~= 1 and wirelink["State"] ~= "Awaiting Activation" then
					wirelink[activator] = 1
					successful = successful + 1
				end
			end

			if successful == 0 then
				mfchat.error(player, "All {s blue} are already active.", module:entityName())
			elseif successful < #wirelinks then
				mfchat.say(player, "{s blue} out of {s blue} have been enabled.", tostring(successful), tostring(#wirelinks), module:systemName())
			else
				mfchat.say(player, "All {s blue} have been enabled.", module:systemName())
			end
		else
			local successful = 0
			for i = 1, #wirelinks do
				local wirelink = wirelinks[i]
				if wirelink[active] == 1 or wirelink["State"] == "Awaiting Activation" then
					wirelink[activator] = 0
					successful = successful + 1
				end
			end

			if successful == 0 then
				mfchat.error(player, "All {s blue} are already inactive.", module:entityName())
			elseif successful < #wirelinks then
				mfchat.say(player, "{s blue} out of {s blue} have been disabled.", tostring(successful), tostring(#wirelinks), module:systemName())
			else
				mfchat.say(player, "All {s blue} have been disabled.", module:systemName())
			end
		end
	end
end

local function shieldToggler(module, enable, player, action)
	if not IsValid(module) then
		mfchat.error(player, "{s blue} not found.", module:entityName())
		return
	elseif not IsValid(mfwire.getModuleByClass("ship_core")) then
		mfchat.error(player, "{s blue} not found.", mfwire.getModuleByClass("ship_core"):entityName())
		return
	elseif not IsValid(mfwire.getModuleByClass("stargazer_node")) then
		mfchat.error(player, "{s blue} not found.", mfwire.getModuleByClass("stargazer_node"):entityName())
		return
	end

	local wirelink = module:getWirelink()

	if enable then
		if wirelink["Active"] == 1 then
			if action == "raise" then
				mfchat.error(player, "The shields are already raised.")
			elseif action == "up" then
				mfchat.error(player, "Shields already up.")
			else
				mfchat.error(player, "The {s blue} is already active.", module:entityName())
			end

			return
		elseif wirelink["State"] == "Awaiting Activation" then
			mfchat.error(player, "The {s blue} is awaiting activation.", module:entityName())
			return
		end
	else
		if wirelink["Active"] == 0 and wirelink["State"] ~= "Awaiting Activation" then
			if action == "lower" then
				mfchat.error(player, "The shields are already lowered.")
			elseif action == "down" then
				mfchat.error(player, "Shields already down.")
			else
				mfchat.error(player, "The {s blue} is already inactive.", module:entityName())
			end

			return
		end
	end


	if enable then
		wirelink["Activate"] = 1

		if module:class() == "st_shield_emitter" then
			if action == "raise" then
				mfchat.say(player, "Raising shields.")
			elseif action == "up" then
				mfchat.say(player, "Shields up.")
			else
				mfchat.say(player, "Enabling the {s blue}.", module:systemName())
			end
		else
			local cur, max = wirelink["Current Energy"], wirelink["Max Energy"]

			if cur < max then
				local delay = 0.5

				mfchat.say(player, "Shields activated, current energy : {s green}/{s green} ({blue}{d 02 p}{white}).", tostring(cur), tostring(max), cur/max)
				timer.simple(delay, function()
					local newCur = wirelink["Current Energy"]
					local delta = (newCur - cur) / delay
					local ETA = math.round((max - newCur) / delta, 2)
					mfchat.say(player, "ETA: {green}{d t}", ETA)
				end)
			else
				if action == "raise" then
					mfchat.say(player, "Raising shields.")
				elseif action == "up" then
					mfchat.say(player, "Shields up.")
				else
					mfchat.say(player, "Enabling the {s blue}.", module:systemName())
				end
			end
		end

		if wirelink["Subsystem Health"] < 50 then
			mfchat.warn(player, "Shield subsystem health below 50%, impacts will deal 25% more damage.")
		elseif wirelink["Subsystem Health"] < 25 then
			mfchat.error(player, "Shield subsystem health below 25%, shields won't engage!")
		end
	else
		wirelink["Activate"] = 0
		if action == "lower" then
			mfchat.say(player, "Lowering shields.")
		elseif action == "down" then
			mfchat.say(player, "Shields down.")
		else
			mfchat.say(player, "Disabling the {s blue}.", module:systemName())
		end
	end
end

---Base Modules
Module("ship_core", {entity = "Ship Core", system = "Plating Emitters"}, true, true, standardToggler, {activator = "Enable Plating", active = "Plating Enabled"})
Module("st_shield_emitter", {entity = "Starship Shield", system = "Shield Array"}, true, true, shieldToggler)
Module("atlantis_shield_emitter", {entity = "Atlantis Shield", system = "Shield Array"}, true, true, shieldToggler)
Module("st_cloaking_device", {entity = "Cloaking Device", system = "Cloaking Emitters"}, true, true, standardToggler)

---Stargazer Modules
Module("stargazer_node", {entity = "Resource Node", system = "Resource Node"}, true, false)
Module("stargazer_energy_core", {entity = "Energy Core", system = "Energy Core"}, true, true, standardToggler)
Module("stargazer_water_core", {entity = "Water Core", system = "Water Core"}, true, true, standardToggler)
Module("stargazer_refinement_core", {entity = "Refinement Core", system = "Refinery"}, true, true, standardToggler)
Module("stargazer_ls_core", {entity = "Life Support Core", system = "Life Support"}, true, true, standardToggler)

---Misc Modules
Module("st_forcefield_emitter", {entity = "Forcefield Emitters", system = "Forcefields"}, false, true, standardToggler)

--Finds which modules match the given string and turns them on if only 1 match remains.
local function toggleModule(player, data)
	if not player:isPermitted("module.toggle") then
		mfchat.error(player, "You are not allowed to toggle modules.")
		return
	end

	local enable = data.action == "enable" or data.action == "e"
	local moduleName = data.module

	local modules = mfwire.getModuleByName(moduleName)

	local lastModule
	for i = 1, #modules do
		local module = modules[i]
		if IsValid(module) then
			if lastModule ~= nil then
				mfchat.error(player, "Multiple matches found, please be more specific.")
				return
			end

			lastModule = module
		end
	end

	if lastModule ~= nil then
		if not lastModule:toggleable() then
			mfchat.error(player, "The {s blue} cannot be toggled.", lastModule:entityName())
			return
		end

		if enable then
			lastModule:enableModule(player)
		else
			lastModule:disableModule(player)
		end
	elseif #modules == 0 then
		mfchat.error(player, "No module found.")
	else
		mfchat.error(player, "Module not found on ship.")
	end
end

local function toggleShields(player, data)
	if not player:isPermitted("module.toggle") then
		mfchat.error(player, "You are not allowed to toggle modules.")
		return
	end

	local shields
	local stShield = mfwire.getModuleByClass("st_shield_emitter")
	local atlShield = mfwire.getModuleByClass("atlantis_shield_emitter")

	if IsValid(stShield) then
		shields = stShield
	elseif IsValid(atlShield) then
		shields = atlShield
	else
		mfchat.error(player, "{s blue} not found.", "Shield Emitter")
		return
	end

	local enable = data.action == "up" or data.action == "raise"

	if enable then
		shields:enableModule(player, data.action)
	else
		shields:disableModule(player, data.action)
	end
end

mfchat.addCommand("(enable)[the ]* (.+)", toggleModule, {{"action", "any"}, {"module", "any"}})
mfchat.addCommand("(disable)[the ]* (.+)", toggleModule, {{"action", "any"}, {"module", "any"}})

mfchat.addCommand("(e)[the ]* (.+)", toggleModule, {{"action", "any"}, {"module", "any"}})
mfchat.addCommand("(d)[the ]* (.+)", toggleModule, {{"action", "any"}, {"module", "any"}})

mfchat.addCommand("shields? (%w+)", toggleShields, {{"action", "choice:up,down"}})
mfchat.addCommand("(raise) shields?", toggleShields, {{"action", "any"}})
mfchat.addCommand("(lower) shields?", toggleShields, {{"action", "any"}})

---Self-destruction

local function selfDestruct(player, data)
	local engage = data.action == "engage" or data.action == "online"

	if engage and not player:isPermitted("selfdestruct.engage") then
		mfchat.error(player, "You are not allowed to engage self-destruction.")
		return
	elseif not player:isPermitted("selfdestruct.abort") then
		mfchat.error(player, "You are not allowed to cancel self-destruction.")
		return
	end

	local shipCore = mfwire.getModuleByClass("ship_core")
	if not IsValid(shipCore) then
		mfchat.error(player, "{s blue} not found.", shipCore:entityName())
	end

	if engage then
		local length = data.length
		if length ~= math.clamp(length, 0, 300) then
			mfchat.error(player, "The self-destruction delay must be within 0 second and 5 minutes.", 0, 300)
			return
		elseif timer.exists("self-destruction") then
			mfchat.error(player, "Self-destruction already on the way.")
			return
		end

		local i = 0
		timer.create("self-destruction", 1, length, function()
			i = i + 1

			if not IsValid(shipCore) then
				mfchat.error(player, "{s blue} not found, cancelling self-destruction.", shipCore:entityName())
				timer.remove("self-destruction")
				return
			end

			if i == length then
				shipCore:getEntity():selfDestruct()
				mfchat.say(player, "Self-destructing the ship.")
			end
		end)

		mfchat.warn(player, "Self-destruction engaged, destroying the ship in {d 2 T}.", length)
		if player ~= ents.owner() then
			mfchat.warn(ents.owner(), "{P} has engaged self-destruction.", player)
		end
	else
		if timer.exists("self-destruction") then
			timer.remove("self-destruction")
			mfchat.say(player, "Cancelling self-destruction.")
		else
			mfchat.error(player, "No self-destruction sequence has been started.")
			return
		end
	end
end

mfchat.addCommand("(engage) self%-?destructi?o?n? (%w*)", selfDestruct, {{"action", "any"}, {"length", "number"}})
mfchat.addCommand("(disengage) self%-?destructi?o?n?", selfDestruct, {{"action", "any"}})
mfchat.addCommand("(abort) self%-?destructi?o?n?", selfDestruct, {{"action", "any"}})

mfchat.addCommand("self%-?destructi?o?n? (online) (%w*)", selfDestruct, {{"action", "any"}, {"length", "number"}})
mfchat.addCommand("self%-?destructi?o?n? (offline)", selfDestruct, {{"action", "any"}})