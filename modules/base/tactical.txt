--@name Luna Mainframe | Module | Tactical Controls
--@author The17thDoctor

if CLIENT then return end

local target = nil

local ownableEntities = {
	ship_core = "starship",
	sg_vehicle_f302 = "f302",
	sg_vehicle_teltac = "teltak",
	puddle_jumper = "cap jumper",
	scifi_shuttle = "scifi shuttle",
	sg_vehicle_glider = "death glider",
	st_shuttle_type6 = "type6 shuttle",
	st_shuttle_type9 = "type9 shuttle",
	st_shuttle_type11 = "type11 shuttle",
	atlantis_puddle_jumper = "tscm jumper",
	sg_vehicle_shuttle = "destiny shuttle",
}

function parseTargeting(player, data)

	local targetEntity, targetName
	print(data.target, data.owner)

	if data.target == "borg" or data.target == "box" then
		local borgs = find.byClass("box_*")
		if not IsValid(borgs[1]) then
			mfchat.error(player, "Could not find any {s} ship.", data.target)
			return
		end

		targetEntity = borgs[1]
		targetName = mfchat.parseMessage("the {s green}", targetEntity:getPrintName())
	elseif data.target == "this" or data.target == "that" then
		local entity = player:aimEntity()
		if not IsValid(entity) then
			mfchat.error(player, "Cannot see anything infront of {P you}.", player)
			return
		end

		targetEntity = entity
		targetName = mfchat.parseMessage("{s blue}", data.target)
	elseif IsValid(data.owner) then
		local found = false
		local foundName
		for class, name in pairs(ownableEntities) do
			if string.find(name, data.target) ~= nil then
				print(class)
			end
		end

		if not found then
			if foundName ~= nil then
				mfchat.error(player, "Could not find any {s} owned by {P}.", foundName, data.owner)
			else
				mfchat.error(player, "Invalid target type.")
			end

			return
		end
	else
		mfchat.error(player, "Invalid target type.")
	end
end

mfchat.addCommand("target (%w+)", parseTargeting, {{"target", "any"}})
mfchat.addCommand("target (%w+)'?s? (.+)", parseTargeting, {{"owner", "player"}, {"target", "any"}})

function checkCombatReady(player)

	local info = "ⓘ"
	local warn = "‼"
	local error = "✕"
	local check = "✓"

	local shipCore = mfwire.getModuleByClass("ship_core")
	if not IsValid(shipCore) then
		mfchat.error(player, "{s blue} not found.", shipCore:entityName())
		return
	else
		local wirelink = shipCore:getWirelink()

		if wirelink["Health"] < wirelink["Max Health"] then
			local hull = wirelink["Health"] / wirelink["Max Health"]
			mfchat.warn(player, "{s yellow} Hull at {dp 2}.", warn, hull)
		else
			mfchat.say(player, "{s green} Optimal hull integrity.", check)
		end

		if wirelink["Plating Enabled"] == 1 then
			if wirelink["Plating"] < 100 then
				mfchat.warn(player, "{s yellow} {s} charged at {d 2}%.", warn, shipCore:systemName(), wirelink["Plating"])
			else
				mfchat.say(player, "{s green} {s} fully charged.", check, shipCore:systemName())
			end
		else
			mfchat.error(player, "{s red} {s} offline.", error, shipCore:systemName())
		end
	end

	local atlShield = mfwire.getModuleByClass("atlantis_shield_emitter")
	local stShield = mfwire.getModuleByClass("st_shield_emitter")
	local shield

	if IsValid(atlShield) then
		shield = atlShield
	elseif IsValid(stShield) then
		shield = stShield
	end

	if IsValid(shield) then
		local wirelink = shield:getWirelink()
		local entity = shield:getEntity()

		if wirelink["Active"] == 1 then
			if entity:getTotalCharge() < entity:getMaxCharge() then
				local charge = entity:getTotalCharge() / entity:getMaxCharge()
				mfchat.warn(player, "{s yellow} shield charged at {dp 2}.", warn, charge)
			else
				mfchat.say(player, "{s green} Shields up", check)
			end
		else
			mfchat.error(player, "{s red} Shields down.", error)
		end
	else
		mfchat.error(player, "{s red} Shield not found.", error)
	end

	local computerCore = mfwire.getModuleByClass("computer_core")
	if not IsValid(computerCore) then
		mfchat.say(player, "{s blue} {s} not found.", info, computerCore:entityName())
	else
		mfchat.say(player, "{s green} {s} found.", check, computerCore:entityName())
	end

	if ents.owner():hasDamageEnabled() then
		mfchat.say(player, "{s check} Ship damage enabled.", check, ents.owner())
	else
		if player == ents.owner() then
			mfchat.error(player, "{s red} {P You} do not have ship damage enabled.", error, ents.owner())
		else
			mfchat.error(player, "{s red} {P} does not have ship damage enabled.", error, ents.owner())
		end
	end

	if IsValid(target) and IsValid(target:owner()) then
		if target:owner():hasDamageEnabled() then
			mfchat.say(player, "{s green} {P} has damage enabled.", check, target:owner())
		else
			mfchat.error(player, "{s red} {P} has damage disabled.", error, target:owner())
		end
	end

	if IsValid(target) then
		mfchat.say(player, "{s blue} Targeting {blue}{en}{white}.", info, target)
	else
		mfchat.say(player, "{s yellow} No target has been set.", warn)
	end
end

mfchat.addCommand("check combat readiness", checkCombatReady)
mfchat.addCommand("check battle readiness", checkCombatReady)